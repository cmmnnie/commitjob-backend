import React, { useEffect, useMemo, useRef, useState } from "react";

/**
 * Capstone Chatbot UI Demo
 * - React + TailwindCSS only (no external UI libs)
 * - Message types: user | bot (text, suggestion, job, question)
 * - Features: quick replies, file upload, typing indicator, copy button, evidence toggle, streaming demo
 * - Drop into your app and style/tweak as needed.
 */

export default function ChatbotDemo() {
  const [messages, setMessages] = useState<Msg[]>(() => [
    botText(
      "안녕하세요! 자소서/면접/채용공고 추천을 도와드릴 챗봇입니다. 아래에서 자소서를 업로드하거나, 원하는 직무를 입력해보세요."
    ),
  ]);
  const [input, setInput] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const [uploadName, setUploadName] = useState<string | null>(null);

  const bottomRef = useRef<HTMLDivElement>(null);
  useEffect(() => bottomRef.current?.scrollIntoView({ behavior: "smooth" }), [messages, isTyping]);

  const quickReplies = useMemo(
    () => [
      { label: "백엔드 추천", value: "백엔드 채용 추천해줘 (Spring, 2년, 서울)" },
      { label: "자소서 도와줘", value: "이 프로젝트 리더 경험으로 자소서 문단 추천해줘" },
      { label: "면접 연습", value: "백엔드 면접 질문 5개만 줘" },
    ],
    []
  );

  function handleSend(text?: string) {
    const content = (text ?? input).trim();
    if (!content) return;
    pushMessage(userText(content));
    setInput("");

    // route the intent by simple rules (demo only)
    if (/자소서|문단|내 경험/.test(content)) demoCoverletterFlow();
    else if (/면접|질문/.test(content)) demoInterviewFlow();
    else demoJobsFlow();
  }

  function pushMessage(msg: Msg) {
    setMessages((prev) => [...prev, msg]);
  }

  // ---- Demo flows (replace with real API/MCP calls) ----
  function demoCoverletterFlow() {
    setIsTyping(true);
    // streaming suggestion with evidence
    const suggestion: SuggestionPayload = {
      title: "프로젝트 리드 경험",
      text:
        "Django 기반 API 성능을 35% 개선했고, 팀 내 코드리뷰 프로세스를 도입해 릴리즈 실패율을 낮췄습니다.",
      citations: [
        {
          url: "https://company.example/jd/123",
          quote: "REST API 성능 최적화 경험 보유자 우대",
          offset: [154, 183],
        },
      ],
    };

    streamBotText(
      "귀하의 리더십과 성능 개선 경험을 바탕으로, 다음 문단을 추천드립니다…",
      15,
      () => {
        pushMessage(botSuggestion(suggestion));
        setIsTyping(false);
      }
    );
  }

  function demoInterviewFlow() {
    setIsTyping(true);
    const questions: QuestionPayload[] = [
      {
        q: "팀 내 갈등을 조정했던 경험을 STAR 구조로 말해보세요.",
        refs: ["조직 커뮤니케이션", "리더십"],
      },
      {
        q: "트래픽 급증 상황에서 API 안정성을 어떻게 확보했는지 설명해보세요.",
        refs: ["성능 최적화", "장애 대응"],
      },
      {
        q: "데이터베이스 인덱스 튜닝 경험과 결과를 수치로 말해보세요.",
        refs: ["MySQL", "쿼리 최적화"],
      },
    ];

    streamBotText("면접 예상 질문을 생성 중입니다…", 12, () => {
      pushMessage(botQuestionSet(questions));
      setIsTyping(false);
    });
  }

  function demoJobsFlow() {
    setIsTyping(true);
    const jobs: JobCardPayload[] = [
      {
        title: "백엔드 엔지니어",
        company: "ABC테크",
        region: "서울",
        postedAt: "2025-08-26",
        matchScore: 0.82,
        skills: ["Java", "Spring", "MySQL", "AWS"],
        sourceUrl: "https://company.example/jobs/abc",
        reasons: [
          { type: "tech_overlap", value: ["Spring", "MySQL"] },
          { type: "years_fit", value: "요구 1~3년, 사용자 2년" },
          { type: "region", value: "서울" },
        ],
      },
      {
        title: "플랫폼 서버 개발자",
        company: "XYZ 금융",
        region: "경기",
        postedAt: "2025-08-25",
        matchScore: 0.77,
        skills: ["Node.js", "Django", "MySQL"],
        sourceUrl: "https://company.example/jobs/xyz",
        reasons: [
          { type: "tech_overlap", value: ["Node.js", "MySQL"] },
          { type: "years_fit", value: "요구 신입~2년" },
        ],
      },
    ];

    streamBotText("프로필과 조건에 맞는 채용공고를 찾고 있어요…", 15, () => {
      pushMessage(botJobList(jobs));
      setIsTyping(false);
    });
  }

  function streamBotText(text: string, chunk: number, onDone: () => void) {
    const tokens = chunkSplit(text, chunk);
    let i = 0;
    const id = setInterval(() => {
      if (i === 0) pushMessage(botText(tokens[i]));
      else appendLastBotText(tokens[i]);
      i++;
      if (i >= tokens.length) {
        clearInterval(id);
        onDone();
      }
    }, 120);
  }

  function appendLastBotText(append: string) {
    setMessages((prev) => {
      const last = prev[prev.length - 1];
      if (!last || last.role !== "bot" || last.kind !== "text") return prev;
      const updated = { ...last, text: last.text + append } as BotTextMsg;
      return [...prev.slice(0, -1), updated];
    });
  }

  function handleFile(e: React.ChangeEvent<HTMLInputElement>) {
    const f = e.target.files?.[0];
    if (!f) return;
    setUploadName(f.name);
    pushMessage(userText(`자소서 업로드: ${f.name}`));
    // TODO: upload + parse + call MCP
    demoCoverletterFlow();
  }

  return (
    <div className="min-h-screen bg-gradient-to-b from-white to-slate-50 flex flex-col">
      <Header />

      <main className="max-w-3xl w-full mx-auto flex-1 px-4 sm:px-6 py-4">
        <AssistantIntro />

        <div className="mt-4 space-y-3">
          {messages.map((m, idx) => (
            <MessageBubble key={idx} msg={m} />
          ))}
          {isTyping && <TypingBubble />}
          <div ref={bottomRef} />
        </div>
      </main>

      <footer className="border-t bg-white/80 backdrop-blur sticky bottom-0">
        <div className="max-w-3xl mx-auto px-4 sm:px-6 py-3 flex flex-col gap-2">
          {/* Quick Replies */}
          <div className="flex flex-wrap gap-2">
            {quickReplies.map((qr) => (
              <button
                key={qr.label}
                onClick={() => handleSend(qr.value)}
                className="px-3 py-1.5 rounded-full text-sm bg-slate-100 hover:bg-slate-200 transition"
              >
                {qr.label}
              </button>
            ))}
          </div>

          {/* Input Row */}
          <div className="flex items-center gap-2">
            <label className="cursor-pointer shrink-0">
              <input type="file" className="hidden" onChange={handleFile} />
              <span className="inline-flex items-center gap-2 px-3 py-2 rounded-xl bg-slate-100 hover:bg-slate-200 text-sm">
                <PaperclipIcon className="w-4 h-4" /> 파일
              </span>
            </label>
            {uploadName && (
              <span className="text-xs text-slate-500 truncate max-w-[40%]">{uploadName}</span>
            )}
            <input
              value={input}
              onChange={(e) => setInput(e.target.value)}
              onKeyDown={(e) => e.key === "Enter" && handleSend()}
              placeholder="메시지를 입력하거나, 요구사항/자소서 내용을 붙여넣어 보세요…"
              className="flex-1 px-4 py-2 rounded-xl bg-white border border-slate-200 focus:outline-none focus:ring-2 focus:ring-slate-300"
            />
            <button
              onClick={() => handleSend()}
              className="shrink-0 inline-flex items-center gap-2 px-4 py-2 rounded-xl bg-blue-600 text-white hover:bg-blue-700"
            >
              <ArrowRightIcon className="w-4 h-4" /> 보내기
            </button>
          </div>
        </div>
      </footer>
    </div>
  );
}

// ===== UI Pieces =====
function Header() {
  return (
    <div className="border-b bg-white/80 backdrop-blur">
      <div className="max-w-3xl mx-auto px-4 sm:px-6 py-3 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <BotIcon className="w-5 h-5" />
          <span className="font-semibold">캡스톤 취업 도우미</span>
        </div>
        <div className="text-xs text-slate-500">Hallucination‑free • Evidence‑first</div>
      </div>
    </div>
  );
}

function AssistantIntro() {
  return (
    <div className="rounded-2xl border border-slate-200 bg-white p-4">
      <div className="flex items-start gap-3">
        <div className="shrink-0"><BotIcon className="w-6 h-6" /></div>
        <div className="space-y-1">
          <div className="font-medium">도움이 필요하신가요?</div>
          <p className="text-sm text-slate-600">
            자소서 문장 추천은 항상 <span className="font-semibold">근거</span>와 함께 제공돼요. JD 원문 URL과 인용이 없으면 결과를 비워 신뢰성을 지킵니다.
          </p>
        </div>
      </div>
    </div>
  );
}

function MessageBubble({ msg }: { msg: Msg }) {
  const isUser = msg.role === "user";
  return (
    <div className={`flex ${isUser ? "justify-end" : "justify-start"}`}>
      <div
        className={`max-w-[85%] md:max-w-[70%] rounded-2xl px-3 py-2 shadow-sm border ${
          isUser ? "bg-blue-600 text-white border-blue-600" : "bg-white text-slate-800 border-slate-200"
        }`}
      >
        {msg.kind === "text" && <p className="whitespace-pre-wrap leading-relaxed">{msg.text}</p>}
        {msg.kind === "suggestion" && <SuggestionCard payload={msg.payload} />}
        {msg.kind === "joblist" && <JobList payload={msg.payload} />}
        {msg.kind === "questions" && <QuestionList payload={msg.payload} />}
      </div>
    </div>
  );
}

function TypingBubble() {
  return (
    <div className="flex justify-start">
      <div className="max-w-[70%] rounded-2xl px-3 py-2 border border-slate-200 bg-white">
        <div className="flex items-center gap-1">
          <span className="w-2 h-2 bg-slate-400 rounded-full animate-bounce" />
          <span className="w-2 h-2 bg-slate-400 rounded-full animate-bounce [animation-delay:150ms]" />
          <span className="w-2 h-2 bg-slate-400 rounded-full animate-bounce [animation-delay:300ms]" />
          <span className="text-xs text-slate-500 ml-2">생성 중…</span>
        </div>
      </div>
    </div>
  );
}

function SuggestionCard({ payload }: { payload: SuggestionPayload }) {
  const [showEvidence, setShowEvidence] = useState(false);
  const [copied, setCopied] = useState(false);

  function copy() {
    navigator.clipboard.writeText(payload.text).then(() => {
      setCopied(true);
      setTimeout(() => setCopied(false), 800);
    });
  }
  return (
    <div className="space-y-2">
      <div className="font-semibold">{payload.title}</div>
      <p className="leading-relaxed text-slate-800">{payload.text}</p>
      <div className="flex items-center gap-2">
        <button onClick={() => setShowEvidence((v) => !v)} className="text-sm px-2 py-1 rounded-lg bg-slate-100 hover:bg-slate-200">
          {showEvidence ? "근거 숨기기" : "근거 보기"}
        </button>
        <button onClick={copy} className="text-sm px-2 py-1 rounded-lg bg-blue-600 text-white hover:bg-blue-700">복사</button>
        {copied && <span className="text-xs text-slate-500">복사됨</span>}
      </div>
      {showEvidence && (
        <div className="mt-1 border rounded-lg p-2 bg-slate-50">
          <div className="text-xs text-slate-500 mb-1">출처 / 근거</div>
          {payload.citations.map((c, i) => (
            <a key={i} href={c.url} target="_blank" className="block text-sm underline text-blue-600">
              “{c.quote}” <span className="text-slate-400">(offset {c.offset[0]}–{c.offset[1]})</span>
            </a>
          ))}
        </div>
      )}
    </div>
  );
}

function JobList({ payload }: { payload: JobCardPayload[] }) {
  return (
    <div className="space-y-3">
      {payload.map((j, i) => (
        <div key={i} className="rounded-xl border p-3 bg-slate-50">
          <div className="flex items-center justify-between">
            <div className="font-medium">{j.title} · <span className="text-slate-600">{j.company}</span></div>
            <div className="text-sm">매칭 <span className="font-semibold">{Math.round(j.matchScore * 100)}%</span></div>
          </div>
          <div className="text-sm text-slate-600 mt-0.5">{j.region} • 게시일 {j.postedAt}</div>
          <div className="flex flex-wrap gap-1 mt-2">
            {j.skills.map((s) => (
              <span key={s} className="px-2 py-0.5 text-xs rounded-full bg-white border">{s}</span>
            ))}
          </div>
          <div className="mt-2 text-xs text-slate-600">
            {j.reasons.map((r, idx) => (
              <span key={idx} className="mr-2">✓ {renderReason(r)}</span>
            ))}
          </div>
          <div className="mt-2">
            <a href={j.sourceUrl} target="_blank" className="text-sm underline text-blue-600">원문 보기</a>
          </div>
        </div>
      ))}
    </div>
  );
}

function renderReason(r: Reason): string {
  if (r.type === "tech_overlap") return `기술 일치: ${(r.value as string[]).join(", ")}`;
  if (r.type === "years_fit") return String(r.value);
  if (r.type === "region") return `지역 일치: ${r.value}`;
  return String(r.value);
}

function QuestionList({ payload }: { payload: QuestionPayload[] }) {
  return (
    <div className="space-y-2">
      {payload.map((q, i) => (
        <div key={i} className="rounded-xl border p-3 bg-slate-50">
          <div className="font-medium">Q{i + 1}. {q.q}</div>
          <div className="mt-1 flex flex-wrap gap-1">
            {q.refs.map((t) => (
              <span key={t} className="px-2 py-0.5 text-xs rounded-full bg-white border">{t}</span>
            ))}
          </div>
        </div>
      ))}
    </div>
  );
}

// ===== Types & helpers =====

type Role = "user" | "bot";

type Msg = BotTextMsg | UserTextMsg | BotSuggestionMsg | BotJobListMsg | BotQuestionsMsg;

type BotTextMsg = { role: "bot"; kind: "text"; text: string };
type UserTextMsg = { role: "user"; kind: "text"; text: string };

type SuggestionPayload = {
  title: string;
  text: string;
  citations: { url: string; quote: string; offset: [number, number] }[];
};

type JobCardPayload = {
  title: string;
  company: string;
  region: string;
  postedAt: string;
  matchScore: number; // 0..1
  skills: string[];
  sourceUrl: string;
  reasons: Reason[];
};

type Reason =
  | { type: "tech_overlap"; value: string[] }
  | { type: "years_fit"; value: string }
  | { type: "region"; value: string };

type QuestionPayload = { q: string; refs: string[] };

type BotSuggestionMsg = { role: "bot"; kind: "suggestion"; payload: SuggestionPayload };

type BotJobListMsg = { role: "bot"; kind: "joblist"; payload: JobCardPayload[] };

type BotQuestionsMsg = { role: "bot"; kind: "questions"; payload: QuestionPayload[] };

function botText(text: string): BotTextMsg {
  return { role: "bot", kind: "text", text };
}
function userText(text: string): UserTextMsg {
  return { role: "user", kind: "text", text };
}
function botSuggestion(payload: SuggestionPayload): BotSuggestionMsg {
  return { role: "bot", kind: "suggestion", payload };
}
function botJobList(payload: JobCardPayload[]): BotJobListMsg {
  return { role: "bot", kind: "joblist", payload };
}
function botQuestionSet(payload: QuestionPayload[]): BotQuestionsMsg {
  return { role: "bot", kind: "questions", payload };
}

function chunkSplit(text: string, size = 10) {
  const out: string[] = [];
  for (let i = 0; i < text.length; i += size) out.push(text.slice(i, i + size));
  return out;
}

// tiny inline icons (no deps)
function BotIcon({ className = "w-4 h-4" }: { className?: string }) {
  return (
    <svg viewBox="0 0 24 24" fill="none" className={className}>
      <rect x="3" y="7" width="18" height="12" rx="3" className="fill-slate-800" />
      <circle cx="9" cy="13" r="1.5" className="fill-white" />
      <circle cx="15" cy="13" r="1.5" className="fill-white" />
      <rect x="10.5" y="2" width="3" height="5" className="fill-slate-800" />
    </svg>
  );
}
function PaperclipIcon({ className = "w-4 h-4" }: { className?: string }) {
  return (
    <svg viewBox="0 0 24 24" fill="none" className={className}>
      <path d="M8 12l6-6a4 4 0 116 6l-8 8a5 5 0 11-7-7l8-8" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  );
}
function ArrowRightIcon({ className = "w-4 h-4" }: { className?: string }) {
  return (
    <svg viewBox="0 0 24 24" fill="none" className={className}>
      <path d="M5 12h14M13 5l7 7-7 7" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" />
    </svg>
  );
}
